package com.blackhammer.stereviewer {		import flash.display.*;	import flash.display.BitmapData;	import flash.display.Bitmap;	import com.blackhammer.stereviewer.*;	import com.blackhammer.util.BHUtils;	import com.greensock.*;	import flash.events.*;	import flash.display.Graphics;	import flash.net.URLRequest;		public class Image_Manager extends Sprite {				private var _myDaddy:Object;		private var _smallImageBM:Bitmap;		private var _largeImageBM:Bitmap;		private var _myX:Number;		private var _myY:Number;		private var _Config:SV_Config;		private var _offsetX:Number;		private var _offsetY:Number;		private var _gSprite:Sprite = new Sprite();		private var _g:Graphics;		private var _captionField:StaticTextField;		public function Image_Manager(myDaddy:Object) {			_myDaddy = myDaddy;			_Config = SV_Config.getInstance();			_g = _gSprite.graphics;		}				public function setNewImage(imageBMD:BitmapData, daX:Number, daY:Number, caption:String="",fieldWidth:Number = 0):void{			if (fieldWidth==0) {fieldWidth = SV_Config.FIELDWIDTH;}			//trace("inside imageManager XXXXXXXXXX",imageBMD);			_smallImageBM = new Bitmap(imageBMD);			_largeImageBM = new Bitmap(imageBMD);			var scalenum:Number = (fieldWidth - 2*SV_Config.FIELDMARGIN)/_smallImageBM.width;			_smallImageBM.scaleX = _smallImageBM.scaleY = scalenum;			if (daX == -1 || daY == -1){				daX = SV_Config.IMAGEWIDTH + SV_Config.CENTERMARGIN + SV_Config.FIELDMARGIN;				daY = SV_Config.SLIDERGROUPTOP - _smallImageBM.height;// - SV_Config.FIELDMARGIN +10;				//daY = SV_Config.FIELDTOP + SV_Config.FIELDHEIGHT - _smallImageBM.height - SV_Config.FIELDMARGIN; //SV_Config.SCREENH			}			_smallImageBM.x = _myX = daX;			_smallImageBM.y = _myY = daY;			if (SV_Config.EDITMODE){				this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownEdit, false, 0, true);			}else{				this.addEventListener(MouseEvent.MOUSE_DOWN, showLargeImage, false, 0, true);			}			//trace("_largeImageBM.width",_largeImageBM.width);			_captionField = new StaticTextField(this,_largeImageBM.width,100,5,true)			_captionField.mPlay(caption, SV_Config.FONTSIZE, false, false);			_captionField.mHide();		}		public function mShow():void{			_smallImageBM.alpha = 0;			addChild(_smallImageBM);			TweenMax.to(_smallImageBM, .7, {alpha:1.0});		}		public function mHide():void{			if (this.contains(_smallImageBM)){				TweenMax.to(_smallImageBM, .7, {alpha:0,onComplete:hideDone});			}		}		private function hideDone():void{			removeChild(_smallImageBM);		}		private function onMouseDownEdit(e:Event):void{			e.stopPropagation();			_offsetX = _smallImageBM.x - this.mouseX;			_offsetY = _smallImageBM.y - this.mouseY;			this.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDownEdit);			this.addEventListener(MouseEvent.MOUSE_UP, onMouseUpEdit,false,0,true);			this.addEventListener(Event.ENTER_FRAME,onEnterFrame, false, 0, true);		}		private function onEnterFrame(e:Event):void{			_smallImageBM.x = _myX = this.mouseX + _offsetX;			_smallImageBM.y = _myY = this.mouseY + _offsetY;		}				private function onMouseUpEdit(e:Event):void{			this.removeEventListener(MouseEvent.MOUSE_UP, onMouseUpEdit);			this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownEdit,false,0,true);			this.removeEventListener(Event.ENTER_FRAME,onEnterFrame);			_myDaddy.saveImageCoords(_myX,_myY);			trace(_myX,_myY);		}		private function showLargeImage(e:Event):void{			e.stopPropagation();			this.removeEventListener(MouseEvent.MOUSE_DOWN, showLargeImage);			//_myDaddy._sliderGroup.mHide();			darkenScreen();			_largeImageBM.x = (SV_Config.SCREENW - _largeImageBM.width)/2			_largeImageBM.y = (SV_Config.SCREENH - _largeImageBM.height)/2			_largeImageBM.alpha = 0;			addChild(_largeImageBM);			_captionField.x = _largeImageBM.x;			_captionField.y = _largeImageBM.y + _largeImageBM.height + 8;			TweenMax.to(_largeImageBM, .7, {alpha:1,onComplete:showLargeImageDone});			addChild(_captionField);			_captionField.mShow();		}		private function darkenScreen():void{			_g.clear();			_g.beginFill(0x000000,0.80);			_g.drawRect(0,0,SV_Config.SCREENW,SV_Config.SCREENH);			_gSprite.alpha = 0;			addChild(_gSprite);			TweenMax.to(_gSprite, .7, {alpha:1});		}		private function showLargeImageDone():void{			this.addEventListener(MouseEvent.MOUSE_DOWN, hideLargeImage,false,0,true);		}		private function hideLargeImage(e:Event):void{			TweenMax.to(_largeImageBM, .4, {alpha:0,onComplete:hideLargeImageDone});			TweenMax.to(_gSprite, .4, {alpha:0});			_captionField.mHide();		}		private function hideLargeImageDone():void{			removeChild(_captionField);			removeChild(_gSprite);			removeChild(_largeImageBM);			this.removeEventListener(MouseEvent.MOUSE_DOWN, hideLargeImage);			this.addEventListener(MouseEvent.MOUSE_DOWN, showLargeImage,false,0,true);		}	}	}