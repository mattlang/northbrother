package com.blackhammer.stereviewer {		import flash.display.MovieClip;	import flash.display.Loader;	import flash.events.Event;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.net.URLRequest;		import com.greensock.*;	import com.greensock.easing.*;	import flash.display.Loader;		public class StereoPair extends MovieClip{		private var _myDaddy:Object;		private var _leftEdge:int;		private var _flickerRate:Number=.3;		private var _myX:int;		private var _myID:int;		//private var _leftImageBMD:BitmapData;		//private var _rightImageBMD:BitmapData;		private var _leftImageBM:Bitmap;		private var _rightImageBM:Bitmap;		private var _myTimeline:TimelineMax;		public var _type:String = "stereopair";		private var _isStopped:Boolean = false;				///changes for optimization keeing less in memory		private var _leftImagePath:String;		private var _rightImagePath:String;		private var _isLoaded:Boolean = false;		private var _addFade:Boolean = false;		//public function StereoPair(myDaddy:Object, daX:int, daY:int,leftImageBMD:BitmapData,rightImageBMD:BitmapData,myID:int=-1) {		public function StereoPair(myDaddy:Object, daX:int, daY:int,leftImagePath:String,rightImagePath:String,myID:int=-1) {				_myDaddy = myDaddy;			this.x = _myX = daX;			this.y = daY;			_myID = myID;			_leftImageBM = new Bitmap(); //leftImageBMD			_rightImageBM = new Bitmap(); //rightImageBMD			_leftImagePath = leftImagePath;			_rightImagePath = rightImagePath;			_leftImageBM.x = _rightImageBM.x = daX;			_leftImageBM.y = _rightImageBM.y = daY;			addChild(_leftImageBM);			addChild(_rightImageBM);		}				private function updateFade():void{			_myTimeline = new TimelineMax({onComplete:updateFade}); //{onComplete:updateFade}			_myTimeline.autoRemoveChildren = true;			_myTimeline.append(TweenLite.to (_rightImageBM, _flickerRate/2, {alpha:0.0, ease:Sine.easeInOut} ) );			_myTimeline.append(TweenLite.to (_rightImageBM, _flickerRate/2, {alpha:1.0, ease:Sine.easeInOut} ) );		}				public function mPlay():void{			if (!_isLoaded) {				_addFade=true;				_leftImageBM.alpha = 0;				mLoad();			}			//trace("stereoPair mPlay",_myID);			mStop();//belt and suspenders			_flickerRate =  _myDaddy._sliderGroup._slider1.slidervalue;			if(_flickerRate == 0) {				mStop();				_isStopped = true;			}else{				//trace("_flickerRate",_flickerRate);				updateFade();			}		}		public function mStop():void{			//trace("stereoPair mStop",_myID);			//_myTimeline.killTweensOf(_rightImageBM);			//trace("_myTimeline",_myTimeline);			if (_myTimeline!=null) _myTimeline.kill();			_rightImageBM.alpha = 0;		}		public function updateFlickerRate(newRate:Number):void{			_flickerRate = newRate;			if(_isStopped && _flickerRate >0){				_isStopped = false;				mPlay();			}		}		public function updateRX(newX:Number):void{			_rightImageBM.x = newX;		}		public function mLoad():void{			if(!_isLoaded) loadLeft();		}		public function mUnload():void{			if (!_isLoaded) return;			_leftImageBM.bitmapData.dispose();			_rightImageBM.bitmapData.dispose();			_leftImageBM.bitmapData = null;			_rightImageBM.bitmapData = null;			_isLoaded = false;		}		private function loadLeft():void{			var loadLeft:Loader = new Loader();			loadLeft.load(new URLRequest(_leftImagePath));			loadLeft.contentLoaderInfo.addEventListener(Event.COMPLETE,completeLoadLeft, false, 0 , true);		}			private function completeLoadLeft(e:Event):void{			_leftImageBM.bitmapData = e.target.content.bitmapData;			e.target.removeEventListener(Event.COMPLETE,completeLoadLeft);			var loadRight:Loader = new Loader();			loadRight.load(new URLRequest(_rightImagePath));			loadRight.contentLoaderInfo.addEventListener(Event.COMPLETE,completeLoadRight, false, 0 , true);		}		private function completeLoadRight(e:Event):void{			_rightImageBM.bitmapData = e.target.content.bitmapData;			e.target.removeEventListener(Event.COMPLETE,completeLoadRight);			if(_addFade){				TweenLite.to (_leftImageBM, .4, {alpha:1.0, ease:Sine.easeOut} )				_addFade=false;			}			_isLoaded = true;		}	}	}