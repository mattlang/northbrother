package com.blackhammer.util {		import flash.display.*;	import flash.geom.*;	import flash.media.*;	import flash.events.*;		public class BHUtils{			public function BHUtils():void{				}				public static function dist(pointa:Point, pointb:Point):Number{			return Math.sqrt( Math.pow((pointa.x - pointb.x),2) + Math.pow((pointa.y - pointb.y),2)  );		}		public static function radiansToDegrees(angle_radians:Number):Number{			return (180/Math.PI)*angle_radians ;		}		public static function degreesToRadians(angle_degrees:Number):Number{			return (Math.PI/180.0)*angle_degrees;		}		public static function getRandom(min:Number, max:Number):Number {			return min + (Math.random() * (max - min));		}		public static function playSound(soundObject:Object) {			var channel:SoundChannel = soundObject.play();		}		//sometimes can't get indexOf to return anything other than -1 so I rolled my own.		//used == instead of ===		public static function findIndexInArray(value:Object, arr:Array):Number {			for (var i:uint=0; i < arr.length; i++) {				if (arr[i]==value) {					return i;				}			}			return -1;		}		public static function StringToBoolean($string:String):Boolean		{			return ($string.toLowerCase() == "true" || $string.toLowerCase() == "1");		}			////lat lon stuff////		public static  function RadianToLatLon(daAngle:Number):String{			var daDegrees = radiansToDegrees(daAngle);			return String(Math.floor(daDegrees)) + "°" +" "+ (daDegrees % Math.floor(daDegrees)*60).toFixed(5)+"'";		}		public static  function feetToNMiles(daFeet:Number):Number{			return daFeet * 0.000164578834;		}		public static  function NMilesToRads(distance_nm:Number):Number{			return (Math.PI/(180.0*60.0))*distance_nm;		}		public static  function latlonRadianToDegree(daPair:Array):Array{			return [radiansToDegrees(daPair[0]),radiansToDegrees(daPair[1])];		}		public static  function latlonDegreeToRadian(daPair:Array):Array{			return [degreesToRadians(daPair[0]),degreesToRadians(daPair[1])];		}		///end lat lon stuff//				//hex stuff//		public static function GetHexStrPad2 (vInt:int):String{			var vHexStr:String = ""			if (vInt >= 16) {				var vHex2:int = Math.floor(vInt/16);				switch (vHex2) {					case 10: 				  		vHexStr = vHexStr.concat("A");						break;				 	case 11: 				  		vHexStr = vHexStr.concat("B");						break;					case 12: 				  		vHexStr = vHexStr.concat("C");				  		break;				 	case 13:				  		vHexStr = vHexStr.concat("D");				  		break;					case 14:				  		vHexStr = vHexStr.concat("E");				  		break;				  	case 15:				  		vHexStr = vHexStr.concat("F");				  		break;					default:						vHexStr = vHexStr.concat(String(vHex2));				}				vInt = vInt % 16;			}else{				vHexStr = vHexStr.concat("0");			}			switch (vInt) {				case 10:					vHexStr = vHexStr.concat("A");					break;				case 11:					vHexStr = vHexStr.concat("B");					break;				case 12:					vHexStr = vHexStr.concat("C");					break;				case 13:					vHexStr = vHexStr.concat("D");					break;				case 14:					vHexStr = vHexStr.concat("E");					break;				case 15:					vHexStr = vHexStr.concat("F");					break;				default:					vHexStr = vHexStr.concat(String(vInt));		  }		  		  return vHexStr;		}		/////set center registration point ///////		public static function setRegistrationPoint(theObject:Object, regx:Number, regy:Number, showRegistration:Boolean=false )		{		  //translate movieclip 			 theObject.transform.matrix = new Matrix(1, 0, 0, 1, -regx, -regy);				 //registration point.		 if (showRegistration)			{				var mark:Sprite = new Sprite();				mark.graphics.lineStyle(1, 0xFF0000);				mark.graphics.moveTo(-5, -5);				mark.graphics.lineTo(5, 5);				mark.graphics.moveTo(-5, 5);				mark.graphics.lineTo(5, -5);				theObject.addChild(mark);			}		}				public static function ShowChildren(dispObj:*):void {			for(var i:int = 0; i < dispObj.numChildren; i++) {				var obj:DisplayObject = dispObj.getChildAt(i);				if (obj is DisplayObjectContainer) {					trace(obj.name, obj);					ShowChildren(obj);				} else {					trace(obj);				}			}		}		/*		public static function ShowChildren2(dispObj:DisplayObject, indentLevel:Number):void {			for (var i:uint = 0; i < dispObj.numChildren; i++) {				var obj:DisplayObject = dispObj.getChildAt(i);				if (obj is DisplayObjectContainer) {					trace(padIndent(indentLevel), obj.name, obj);					ShowChildren(obj, indentLevel + 1);				} else {					trace(padIndent(indentLevel) + obj);				}			}		}*/			private static function padIndent(indents:int):String {			var indent:String = "";			for (var i:uint = 0; i < indents; i++) {				indent += "    ";			}			return indent;		}										}}