package  com.blackhammer.util{		import com.blackhammer.game.*;	import com.blackhammer.util.*;	import flash.display.Sprite;    import flash.utils.*;    import flash.events.TimerEvent;    import flash.events.Event;    import flash.text.*;			/*/////////	//This class needs the calling script to have a TimesUp() method to trap countdone done message	*/////////	public class CountDownTimer extends Sprite{		        private var _countDown:TextField;        private var _timer:Timer;        private var _startTime:Number;        private var _expireTime:Number;		private var _range:Number;		private var _refreshTime:Number;		private var _myDaddy:Object;		public var _timerDisplay:ScoreDisplay = new ScoreDisplay(35);				private var _stoppedTime:Number;		private var _isStopped:Boolean;		private var _elapsedTime:Number;				public function CountDownTimer(myDaddy:Object, refreshSecs:Number, seconds:Number):void {            _myDaddy = myDaddy;            // configure start, end, and duration values.            _startTime = getTimer();			_range = seconds;			_refreshTime = refreshSecs;           	_expireTime = _startTime + (1000 * _range);			//_expireTime = _startTime;						addChild(_timerDisplay);			_timerDisplay.Display(GetTimeDisplay(0));            // configure timer interval.          	_timer = new Timer(refreshSecs * 1000);         	_timer.addEventListener(TimerEvent.TIMER, this._onRefresh);          	///_timer.start();			_timer.stop();			_isStopped = true;            //refresh();        }        /**        * Refreshes countdown display.        */        private function refresh(evt:Event=null):void        {            var elapsed:Number = _expireTime - getTimer();			_elapsedTime = elapsed			if (_expireTime <= getTimer()){			   CountDownDone();			}else{				_timerDisplay.Display(GetTimeDisplay(elapsed));		   }           // _countDown.htmlText = _small("count down: ") + _getTimeDisplay(_range-elapsed).toUpperCase();		 }		private function CountDownDone():void{			_timerDisplay.Display(GetTimeDisplay(0));			StopTimer();			_myDaddy.TimesUp();		}				public function StopTimer():void {			//trace("StopTimer countdowntimer")            _isStopped = true;			_timer.stop();			_stoppedTime = getTimer();			//_timer.stop();            //_timer.removeEventListener(TimerEvent.TIMER, this._onRefresh);            //_timer = null;        }				public function StartTimer():void {			//trace("StartTimer countdowntimer")			_isStopped = false;            _expireTime += getTimer() - _stoppedTime; 			_timer.start();        }				public function AddTime(daTime:Number):void        {			//trace("AddTime countdowntimer")          	_expireTime += daTime;		 	_elapsedTime += daTime;		   //_range += daTime;        }				public function ShowTime():void        {          if (_isStopped){			_timerDisplay.Display(GetTimeDisplay(_elapsedTime));		  }else{					  }        }				public function ResetTimer():void{			//trace("resetting countdowntimer")			_timerDisplay.Display(GetTimeDisplay(_range));			_timer.reset();			_startTime = getTimer();			_expireTime = _startTime + (1000 * _range);			        }				public function ResetAndStartTimer():void {			//trace("ResetAndStartTimer countdowntimer")			_timerDisplay.Display(GetTimeDisplay(_range));            _startTime = getTimer();            _expireTime = _startTime + (1000 * _range);			_timer.reset();			_timer.start();			//_timer = new Timer(_refreshTime * 1000);           // _timer.addEventListener(TimerEvent.TIMER, this._onRefresh);           // _timer.start();			//trace("_startTime",_startTime,"_expireTime",_expireTime);        }		        /**        * Disposes of countdown display so that it is eligible for garbage collection.        */        public function Dispose():void        {            _timer.stop();            _timer.removeEventListener(TimerEvent.TIMER, this._onRefresh);            _timer = null;        }        /**        * Generates countdown string from remaining time value.        */        private function GetTimeDisplay(remainder:Number):String        {            /*			// days            var numDays:Number = Math.floor(remainder/86400000);            var days:String = numDays.toString();            remainder = remainder - (numDays*86400000);            // hours            var numHours:Number = Math.floor(remainder/3600000);            var hours:String = (numHours < 10 ? "0" : "") + numHours.toString();            remainder = remainder - (numHours*3600000);			*/            // minutes            var numMinutes:Number = Math.floor(remainder/60000);            var minutes:String = (numMinutes < 10 ? "0" : "") + numMinutes.toString();            remainder = remainder - (numMinutes*60000);            // seconds            var numSeconds:Number = Math.floor(remainder/1000);            var seconds:String = (numSeconds < 10 ? "0" : "") + numSeconds.toString();            remainder = remainder - (numSeconds*1000);            // milliseconds            //var numMilliseconds:Number = Math.floor(remainder/10);            //var milliseconds:String = (numMilliseconds < 10 ? "0" : "") + numMilliseconds.toString();            //return "<FONT SIZE='24'>"+ days + _small("days") + hours + _small("hrs") + minutes + _small("mins") + seconds + _small("secs") + "</FONT>";       		return minutes + ":" + seconds;	   }        /**        * Utility for wrapping value labels in a tag with smaller text.        */        private function _small(label:String):String        {            return "<FONT SIZE='12'> "+label+"</FONT> ";        }        /**        * Timer event handler to call refresh.        */        private function _onRefresh(evt:Event):void        {            refresh();        }    }	}   