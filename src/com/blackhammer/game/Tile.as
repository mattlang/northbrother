package com.blackhammer.game{		import com.blackhammer.util.*	import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.text.*;	import flash.media.*;	import flash.utils.Timer;    import flash.events.TimerEvent;		public class Tile extends Sprite{		private var _tileW:int;	private var _tileH:int;	private var _myDaddy:Object;	private var _myIndex:Number;	///private var _iDField:TextField  = new TextField();	private var _format:TextFormat = new TextFormat();	private var _fontSize:Number = 24;	private var _holdX:Number;	private var _holdY:Number;	private var _holdMouseDnX:Number;	private var _holdMouseDnY:Number;	private var _holdStartX:Number;	private var _holdStartY:Number;	private var _holdDepth:Number;		//private var _arrow:MovieClip = new Arrow();	private var _tileSkinArray:Array = [];	private var _tileSkin:MovieClip;	private var _tileState:Number;	private var _enabled:Boolean;	//private var _arrowTimer:Timer = new Timer(300, 0);		///----sounds----////	private var _mouseDownSnd:Sound= new mouseRoll_snd(); //mouseDown_snd();	//private var _mouseUpSnd:Sound= new placeObject_snd();	//private var _rollSnd:Sound= new mouseRoll_snd();	private var _matchMadeSnd:Sound = new matchMade_snd();			public function Tile(myDaddy:Object,daNum:Number,tileW:Number,tileH:Number,daX:Number,daY:Number):void{	_myDaddy = myDaddy;	_myIndex = daNum;	_tileW = tileW;	_tileH = tileH;	_holdX = daX;	_holdY = daY;	_enabled = false	///var rect:Shape = new Shape();	///rect.graphics.lineStyle(1);	///rect.graphics.beginFill(0xFF0000,1);	///rect.graphics.drawRect(0,0,tileW,tileH);	//rect.alpha = 1.0;	/*	_tileSkinArray.push(new eye_tile_01());	_tileSkinArray.push(new eye_tile_02());	_tileSkinArray.push(new eye_tile_03());	_tileSkinArray.push(new eye_tile_04());	_tileSkinArray.push(new tile_hole());	_tileSkinArray.push(new tile_stone());	_tileSkinArray.push(new tile_blank());	_tileSkin = _tileSkinArray[0]	*/		///_iDField.width = 50;	///_iDField.x = rect.x; 	///_iDField.y = rect.y + 9;	///_iDField.multiline = _iDField.wordWrap = false;	///_iDField.autoSize = TextFieldAutoSize.CENTER;	///_iDField.type = TextFieldType.DYNAMIC;	///_iDField.alpha = 1.0;    ///_format.font = "Verdana";	///_format.bold = true;    ///_format.color = 0x00FF00;    ///_format.size = _fontSize;    ///_format.underline = false;    ///_iDField.defaultTextFormat = _format;		///_iDField.text = String(daNum)	//_iDField.setTextFormat(_format);	 	//this.addChild(rect);	/////this.addChild(_tileSkin);	//this.addChild(_iDField);		//taking arrow out /// this.addChild(_arrow);	//taking arrow out /// _arrow.x = _tileW/2;	//taking arrow out /// _arrow.y = _tileH/2;		//this.addEventListener(MouseEvent.MOUSE_OVER, MouseOverTile, false, 0, true);	//this.addEventListener(MouseEvent.MOUSE_OUT, MouseOutTile, false, 0, true);		//this.addEventListener(MouseEvent.MOUSE_DOWN, MouseDownTile, false, 0, true);	this.addEventListener(Event.ADDED_TO_STAGE, OnTheStage, false, 0, true);	//trace("rect parent is:", rect.parent);	//trace("rect root is:", rect.root);	//trace("_tileSkin parent is:", daSprite.parent);	//trace("_tileSkin root is:", daSprite.root);	}			private function OnTheStage(e:Event):void{		_tileSkinArray.push(new eye_tile_01());		_tileSkinArray.push(new eye_tile_02());		_tileSkinArray.push(new eye_tile_03());		_tileSkinArray.push(new eye_tile_04());		_tileSkinArray.push(new tile_hole());		_tileSkinArray.push(new tile_stone());		_tileSkinArray.push(new tile_blank());		_tileSkin = _tileSkinArray[0]		this.addChild(_tileSkin);		_tileSkin.stop();		this.removeEventListener(Event.ADDED_TO_STAGE, OnTheStage);		Enable();			}			private function MouseOverTile(e:Event):void{		//though tracing this.parent and _myDaddy gives the same object, can't get public property thorugh this.parent		//var topTile:Number = this.parent._numOfRows * this.parent._numOfColumns		//trace(this.parent.numChildren)		//var topTile:Number = (_myDaddy._numOfRows * _myDaddy._numOfColumns) -1				//_rollSnd.play();		_holdDepth = this.parent.getChildIndex(this);		var topTile:Number = this.parent.numChildren -1;		this.parent.setChildIndex(this,topTile);		var scaleConstant:Number = 1.1;		this.scaleX = this.scaleY = scaleConstant;		//_holdX = this.x;		//_holdY = this.y;		this.x = this.x - Math.floor(((_tileW * scaleConstant) - _tileW)/2.0);		this.y = this.y - Math.floor(((_tileH * scaleConstant) - _tileH)/2.0);	}		private function MouseOutTile (e:Event):void{		this.parent.setChildIndex(this,_holdDepth);		this.x = _holdX;		this.y = _holdY;		this.scaleX = 1.0;		this.scaleY = 1.0;	}		private function MouseDownTile (e:Event):Boolean{		//if(_tileSkin == _tileSkinArray[_tileSkinArray.length - 1] ){		if (_tileState < 0){				return(false);		}		_mouseDownSnd.play();		//MouseOutTile (e);		_holdMouseDnX = stage.mouseX;		_holdMouseDnY = stage.mouseY;		////_holdStartX = this.x;		////_holdStartY = this.y;		this.Disable();		stage.addEventListener(Event.ENTER_FRAME, onLoop, false, 0, true);		stage.addEventListener(MouseEvent.MOUSE_UP, MouseUpTile, false, 0, true);		//this.removeEventListener(MouseEvent.MOUSE_OVER, MouseOverTile);		//this.removeEventListener(MouseEvent.MOUSE_OUT, MouseOutTile);				//taking arrow out /// _arrow.Show();		return(true)	}		private function onLoop(e:Event):void{		//trace(e, stage.mouseX, _holdMouseDnX, stage.mouseY, _holdMouseDnY)		if (stage == null){			trace("stage == null in Tile/onLoop");			return;			}		if (Math.abs(stage.mouseX - _holdMouseDnX) > 10 || Math.abs(stage.mouseY - _holdMouseDnY) >10){			MouseUpTile(e);		}				/* //////taking our arrows//////		if (Math.abs(stage.mouseX - _holdMouseDnX) > Math.abs(stage.mouseY - _holdMouseDnY)){			//x arrow//			//this.x = _holdStartX - (_holdMouseDnX - stage.mouseX);			//_myDaddy.MoveRow(this,  (_holdMouseDnX - stage.mouseX));						if (stage.mouseX < _holdMouseDnX){				ShowArrow("left");							}else{				ShowArrow("right");			}					}else{			//y arrow//			//this.y = _holdStartY - (_holdMouseDnY -stage.mouseY)			//_myDaddy.MoveColumn(this, (_holdMouseDnY -stage.mouseY));			if (stage.mouseY < _holdMouseDnY){				ShowArrow("up");			}else{				ShowArrow("down");			}		}		*/	}				private function MouseUpTile(e:Event):void {		//_mouseUpSnd.play();		        //taking arrow out /// _arrowTimer.addEventListener("timer", HideArrow);        //taking arrow out /// _arrowTimer.start();		if (stage == null){			trace("stage == null!!!!! in Tile/MouseUpTile");			return;			}		stage.removeEventListener(Event.ENTER_FRAME, onLoop);		stage.removeEventListener(MouseEvent.MOUSE_UP, MouseUpTile);		//this.addEventListener(MouseEvent.MOUSE_OVER, MouseOverTile, false, 0, true);		//this.addEventListener(MouseEvent.MOUSE_OUT, MouseOutTile, false, 0, true);		if (Math.abs(stage.mouseX - _holdMouseDnX) > Math.abs(stage.mouseY - _holdMouseDnY)){			_myDaddy.MoveRowOne(this,  (stage.mouseX - _holdMouseDnX));		}else{			_myDaddy.MoveColumnOne(this, (stage.mouseY - _holdMouseDnY));		}		//var daNum:Number = _myDaddy.TestForSolution(_myIndex);		if (_myDaddy.TestForSolution(_myIndex)){			_matchMadeSnd.play();			//trace("MATCHMADE", daSolution)			//var tileArray = _myDaddy.GetSolvedTiles(daNum);			_myDaddy.EraseAndRefill(_myIndex);		}else{			Enable();		}	}		/*	private function HideArrow(e:Event):void {		//_arrow.visible = false;		_arrow.Hide();		_arrowTimer.removeEventListener("timer",HideArrow);		_arrowTimer.reset();	}			private function ShowArrow (dir:String):void {		if (dir == "left"){;			_arrow.rotation = 0;			_arrow.rotationY = 180;		}else if (dir =="right") {			_arrow.rotation = 0;			_arrow.rotationY = 0;		}else if (dir =="up") {			_arrow.rotation = -90;			_arrow.rotationY = 0;		}else{			_arrow.rotation = 90;			_arrow.rotationY = 0;		}	}	*/		public function SetNum(daNum:Number):void {			///_iDField.text = String(daNum);		}		public function BlankTile():void {			//trace("blanking tile: ",  _myIndex);			if (_tileState != -1){				_tileState = -1;				var index:Number = this.getChildIndex(_tileSkin);				//trace("blankTile index", index);				removeChild(_tileSkin);				_tileSkin = _tileSkinArray[_tileSkinArray.length-1];				addChildAt(_tileSkin,index);				_tileSkin.alpha = 0;				//addChild(_tileSkin);			}	}			public function StoneTile():void {		_tileState = -2;		var index:Number = this.getChildIndex(_tileSkin);		//trace("blankTile index", index);		removeChild(_tileSkin);		_tileSkin = _tileSkinArray[_tileSkinArray.length-2];		_tileSkin.scaleX = _tileSkin.scaleY = .80		_tileSkin.x = 4.5;		_tileSkin.y = 5.0;		addChildAt(_tileSkin,index);	}		public function HoleTile():void {		_tileState = -3;		var index:Number = this.getChildIndex(_tileSkin);		//trace("blankTile index", index);		removeChild(_tileSkin);		_tileSkin = _tileSkinArray[_tileSkinArray.length-3];		_tileSkin.scaleX = _tileSkin.scaleY = 1.0		_tileSkin.x = 0.5;		_tileSkin.y = 1.5;		addChildAt(_tileSkin,index);	}		public function set tileState(daState:Number):void {			//had trouble with this. wanted to keep it a movieclip to latter animate if wanted.			//kludged by removing and resetting child.			if (_tileState != daState){				if (_tileState == -1 && daState != -1){_tileSkin.alpha = 1.0;}				if (daState == -1){					BlankTile();				}else if (daState == -2){					StoneTile();				}else if (daState == -3){					HoleTile();				}else{						//trace("set tileState daState", daState)					_tileState = daState;					var index:Number = this.getChildIndex(_tileSkin);					removeChild(_tileSkin);					_tileSkin = _tileSkinArray[_tileState - 1];					_tileSkin.scaleX = _tileSkin.scaleY = 1.06					_tileSkin.x = 1;					_tileSkin.y = 1; ///2.5;					//addChild(_tileSkin);					addChildAt(_tileSkin,index); 					_tileSkin.stop();				}			}		}		public function Enable():void{		if (_enabled == false){			//trace("tile " +_myIndex + " was enabled in Tile");			_enabled = true;			this.addEventListener(MouseEvent.MOUSE_DOWN, MouseDownTile, false, 0, true);		}	}		public function Disable():void{		if (_enabled == true){						//trace("tile " +_myIndex + " was disabled in Tile");			_enabled = false;			this.removeEventListener(MouseEvent.MOUSE_DOWN, MouseDownTile);		}	}		public function playTile():void{		_tileSkin.play();	}			public function stopTile():void{		_tileSkin.stop();	}		public function get tileState():Number {			return _tileState;			//return _tileSkinArray.indexOf(_tileSkin);		}			public function get tileW():Number {			return _tileW;		}	public function get tileH():Number {			return _tileH;		}			public function Kill():void {			this.removeEventListener(MouseEvent.MOUSE_DOWN, MouseDownTile);			this.removeChild(_tileSkin);		}			}}