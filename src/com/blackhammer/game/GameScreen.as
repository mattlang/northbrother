package com.blackhammer.game {		import com.blackhammer.game.*	import com.blackhammer.util.*	import com.efnx.fps.fpsBox;		import flash.display.*;	import flash.geom.*;	import flash.text.*;	import flash.events.TimerEvent;    import flash.events.Event;	import flash.events.MouseEvent;	import flash.media.*;	import flash.utils.*;	import flash.net.SharedObject;    import flash.net.SharedObjectFlushStatus;	import flash.events.NetStatusEvent;			public class GameScreen extends MovieClip{		private var TESTMODE:Boolean = true;		private var _bckgrnd_01_Bmd:BitmapData = new gameback(0,0); //new backgrnd_01_btmp(0,0)	private var _bckgrnd_01:Bitmap = new Bitmap(_bckgrnd_01_Bmd);	//private var _bckgrnd_01:MovieClip = new background();	private var _board:MovieClip = new MovieClip();	private var _challengeList:Array = [];	private var _challengeIndex:int = 0	public var _scoreDisplay:ScoreDisplay = new ScoreDisplay();	public var _movesDisplay:ScoreDisplay = new ScoreDisplay(231,35,44); //new ScoreDisplay(92);		public var _score:int = 0;	private var _moves:int = 0;	private var _movesCountDownSteps:int = 10;	private var _movesDecrement:Number;	private var _ScreenDaddy:ScreenDaddy;		private var _format:TextFormat = new TextFormat();	//CountDownTimer(myDaddy:Object, refreshSecs:Number, seconds:Number):void	private var _countDownTimer:CountDownTimer = new CountDownTimer(this,1,120);	private var _CDTimerIncrement:Number;		private var _incTimer:Timer;	///out for now///private var _bounsStingSnd:Sound = new bonus_sting_snd();	private var _scoreIncrement:Number;		private var _message:MessageDisplay = new MessageDisplay(this);	private var _helpFlag:Boolean = true;  ///flags whether help has already shown hen playing again in a session ///need to implement method for doing this upon returning from previous session	private var _timesUpFlag:Boolean = false ////cludge to fix starting clock after times up dialog is done	public var _LevelMode:Boolean = true;  ///used to test level game approach without losing option for score type game		//public var _eyeballCounter:MovieClip = new EyeCounter(this); //y was 7	private var _bonusState:int = 0; //0, nothing going on, 1 Bonus in progress, 2 Bonus in progress and need to resetandStart	public var _interstitial:Interstitial = new Interstitial();		private var _infoButton = new info_button();	private var _helpButton = new help_button();		private var _infoScreen:InfoScreen;	private var _helpScreen:HelpScreen;	private var _isScreenPaused:Boolean = false;		private var _incrementPointsSnd:Sound = new increment_points_snd();	private var _levelStingSnd:Sound = new level_sting_snd();	private var _rollSnd:Sound= new mouseRoll_snd();	 	private var _ggeSoAppName:String = "GooGooEyes_SO";	//public var _ggeSO:SharedObject = new GGESharedObject(_ggeSoAppName);		public function GameScreen (screenDaddy:ScreenDaddy):void{		_ScreenDaddy = screenDaddy;		addChild(_bckgrnd_01);		CreateChallengeList();		//CreateFields();		addChild(_scoreDisplay);		addChild(_movesDisplay);		addChild(_countDownTimer);		//addChild(_eyeballCounter);		this.addChild(_infoButton);		this.addChild(_helpButton);		_infoButton.x = 124;		_helpButton.x = 218;		_infoButton.y = _helpButton.y = 444;		_infoButton.addEventListener(MouseEvent.MOUSE_UP, onInfoButtonUp, false, 0, true);		_helpButton.addEventListener(MouseEvent.MOUSE_UP, onHelpButtonUp, false, 0, true);				addChild(_interstitial);				//fps metrics here		//var fps:fpsBox = new fpsBox(this.stage);     	//addChild(fps);	 		//addChild(_countDownTimer);		_scoreDisplay.Display(_score);		_movesDisplay.Display(_moves);		this.addEventListener(Event.ADDED_TO_STAGE, OnTheStage, false, 0, true);			}		private function OnTheStage(e:Event):void{		stage.frameRate = 26;		removeEventListener(Event.ADDED_TO_STAGE, OnTheStage);		StartGame();	}		private function StartGame():void{		var so:SharedObject = SharedObject.getLocal(_ggeSoAppName);		var daLevel = so.data.ggeLevel;		var daHelpFlag = so.data.ggeHelpFlag;		if (daLevel == null){			_challengeIndex = 0; 			_helpFlag = true;		}else{			_challengeIndex = daLevel;			_helpFlag = daHelpFlag;			if (_challengeIndex > 5){_helpFlag = false;} //just in case.		}		//_challengeIndex = 0; //take this out		StartLevel(_challengeIndex);	}		function StartLevel(challengeIndex:int):void{		/*if (this.contains(_board)){			trace("_board.DisableTiles(); !?!?!?!?!");			_board.DisableTiles();		}*/		_moves = 0;		_movesDisplay.Display(_moves);		ResetBoard(challengeIndex);		if (_helpFlag || _timesUpFlag){			//trace("disableTiles in GameScreen/StartLevel");			_board.DisableTiles();		}else{			_board.EnableTiles();		}	}			private function ResetBoard(challengeIndex:int):void{		//trace("_challengeList[137]",_challengeList[137]);		///challengeIndex not yet used		trace("setting level:",_challengeIndex, "of:",_challengeList.length);		var rows:Number = _challengeList[_challengeIndex][0][0];		var columns:Number = _challengeList[_challengeIndex][0][1];		var numOfBlanks:Number = _challengeList[_challengeIndex][0][2];		var numOfStones:Number = _challengeList[_challengeIndex][0][3];		var numOfHoles:Number = _challengeList[_challengeIndex][0][4];		var solution:Array = _challengeList[_challengeIndex][1];		var numOfRounds:int = _challengeList[_challengeIndex][2];		if (this.contains(_board)){			//trace("removing _board");			_board.ClearBoard();			removeChild(_board);			_board = null;		}				_board = new Board(this,rows,columns,numOfBlanks,numOfStones,numOfHoles,solution,numOfRounds);		addChild(_board);				_board.ResetEyeCounter(numOfRounds);		//addChild(_eyeballCounter);				//removeChild(_message);		addChild(_message);		//var startX:Number = 62; 		//var startY:Number = 425.5;		//ShowSolutionShape(startX:Number ,startY:Number,wdth:Number,hgt:Number)		_board.ShowSolutionShape(63,425.5,60,53);				//trace(ShowChildren(this));				if (_LevelMode){			_incrementPointsSnd.play()			_scoreDisplay.Display(_challengeIndex +1);		}		//trace("_helpFlag",_helpFlag,"_challengeIndex",_challengeIndex,"_timesUpFlag",_timesUpFlag);		if(_helpFlag){			if (_bonusState == 1){				_bonusState = 2; // in bonus and now help at start of new level			}else{				_countDownTimer.ResetTimer();			}			if(_challengeIndex ==0){				_message.Display("Move the tiles to match the challenge shape.",16, 4,false, true,1);			}else if (_challengeIndex == 1) {				_message.Display("You can move more than one tile at a time.",16, 4,false, true, 1);			}else if (_challengeIndex == 2) {				_message.Display("Using less than 5 moves will give you a time bonus.",16, 4,false, true, 1);				}else if (_challengeIndex == 3) {				_message.Display("Fewer moves to match a shape earns more time bonus.",14, 4,false, true, 1);				}else if (_challengeIndex == 4) {				_message.Display("Stone tiles block movement.",18, 4, false, true, 1);				}else if (_challengeIndex == 5) {				_message.Display("Watch out for holes.",18, 4, false, true, 1);				}			//_timesUpFlag = false;		} else if (_timesUpFlag){		}else{			//trace("reseting timer from ResetBoard")			//trace("ResetAndStartTimer in reset else case");			// case where there is no message at beginning of new level			//_board.EnableTiles();			//trace("tiles were enabled in ResetBoard else case");			_countDownTimer.ResetAndStartTimer();		}		//trace("reseting board from GameScreen. numOfChildren = ", this.numChildren)	}		public function MessageDone(id:int):void{		if (id == 0){ //do nothing					}else if (id == 1){ //instructions at beginning of level			if (_bonusState ==1){				//_bonusState = 2;			}else{				//trace("in messageDone")				if (! _isScreenPaused){					_countDownTimer.ResetAndStartTimer();					_timesUpFlag = false;  ///kludge the messages stompoing each other					_board.EnableTiles();				}			}		}else if (id == 2){ //bonus					}else if (id == 3){ ///times up			if (! _isScreenPaused){				_countDownTimer.ResetAndStartTimer();				_timesUpFlag = false;				_board.EnableTiles();				//trace("_timesUpFlag =", _timesUpFlag);			}		}else if (id == 4){ ///finished all the levels			_message.Display("Back to level one.",16, 2, false, true, 0);			_board.EnableTiles();		}		//removeChild(_message);	}		private function StartBonus():void{		//_countDownTimer.AddTime(40000 - _moves*10000);		_bonusState = 1;		_movesCountDownSteps = (5 - _moves) * 3; //trying doing it in 10 steps istead of based on _moves		//_CDTimerIncrement = Math.round((50000 - _moves*10000)/_moves);		_CDTimerIncrement = Math.round((50000 - _moves*10000)/_movesCountDownSteps);		_movesDecrement = _moves/_movesCountDownSteps		//_incTimer = new Timer(60, _moves + 1);		_incTimer = new Timer(60, _movesCountDownSteps + 1); //		_incTimer.addEventListener(TimerEvent.TIMER, IncrementCDTimerLoop);		_incTimer.start();		_countDownTimer.StopTimer();	}		private function IncrementCDTimerLoop(e:Event):void{		if (_movesCountDownSteps > 0){			_incrementPointsSnd.play();			var nummoves:int = int(_moves -= _movesDecrement);			if (nummoves < 0){nummoves = 0;}			_movesDisplay.Display(nummoves);			_countDownTimer.AddTime(_CDTimerIncrement);			_countDownTimer.ShowTime();			_movesCountDownSteps -= 1;		}else{			//trace("stopping loop");			_moves = 0; ///just to make sure			_movesDisplay.Display(_moves);			_incTimer.stop();			removeEventListener(TimerEvent.TIMER, IncrementScoreLoop);			_incTimer = null;			if(_bonusState == 1){				//trace("starting timer at end of bonus")				_countDownTimer.StartTimer();			}else{ //2 and can't be 0!				//trace("ResetTimer in end of bonus")				_countDownTimer.ResetTimer();			}			_bonusState = 0;					}	}		/* //old version	private function IncrementCDTimerLoop(e:Event):void{		if (_moves > 0){			_incrementPointsSnd.play();			_movesDisplay.Display(_moves -=1);			_countDownTimer.AddTime(_CDTimerIncrement);			_countDownTimer.ShowTime();		}else{			//trace("stopping loop");			_incTimer.stop();			removeEventListener(TimerEvent.TIMER, IncrementScoreLoop);			_incTimer = null;			_countDownTimer.StartTimer();		}	}	*/		public function TimesUp():void{		_levelStingSnd.play();		_board.DisableTiles();		_timesUpFlag = true;		//display TimesUp Message with button to play again		//trace("Times up, play again?");		//Display(daText:String,fontSize:Number, readDelay:Number, bold:Boolean = false, clickToKill:Boolean = false,messageID:int = 0, mH:Number = 100)		_message.Display("TIMES UP, TRY AGAIN",18, 4, false, true, 3);		StartLevel(_challengeIndex);				//_message.Display("PLAY AGAIN",24, 0, true,false,4);	}		public function AddToScore():void{		var daMoves = _moves;				if (_LevelMode){			//_LevelMode = true meaning not keeping score, but count of levels and time is reset each challange			//_eyeballCounter.AddCounter();  //this is a function but for now counting is still happening on the board			//trace("_board._solveCount",_board._solveCount)			//trace("_board._NumOfRounds",_board._NumOfRounds)			if ( _moves < 5 &&  _moves > 0 && _board._solveCount < _board._NumOfRounds ){ //&&  _eyeballCounter.eyballCount < _challengeList[_challengeIndex][2] 				//trace("BONUS")				///out for now///_bounsStingSnd.play();				//if (daMoves == 0){ daMoves = 1 }				_message.Display(String(daMoves) + " MOVE BONUS!", 24, 0, true, false,2);				StartBonus();			}			if (_moves > 4 || _board._solveCount == _board._NumOfRounds){				_incrementPointsSnd.play();				_moves = 0;				_movesDisplay.Display(_moves);			}			//increment timer instead of score				}else{			///original mode		if ( _moves < 5){ //!_helpFlag &&			//trace("BONUS")			///out for now///_bounsStingSnd.play();			if (daMoves == 0){ daMoves = 1 }			_message.Display(String(daMoves) + " MOVE BONUS!", 24, 0, true, false,2);			_countDownTimer.AddTime(120000 - _moves*30000);			StartBonus();		}		if (_moves > 10){			_incrementPointsSnd.play();			_moves = 0;			_movesDisplay.Display(_moves);			_score += 1			_scoreDisplay.Display(_score);		} else {			//trace("_scoreIncrement?", _scoreIncrement)			_scoreIncrement = GetNewScore()/_moves;			_incTimer = new Timer(60, _moves + 1)			_incTimer.addEventListener(TimerEvent.TIMER, IncrementScoreLoop);			_incTimer.start();		}		}			}			private function IncrementScoreLoop(e:Event):void{		if (_moves > 0){			_incrementPointsSnd.play();			//_moves--;			_movesDisplay.Display(_moves -=1);			_scoreDisplay.Display(Math.round(_score += _scoreIncrement));			//_incTimer.reset();			//_incTimer.start();			//trace("_moves", _moves)			//trace("_score", _score)		}else{			//trace("stopping loop");			_incTimer.stop();			removeEventListener(TimerEvent.TIMER, IncrementScoreLoop);			_incTimer = null;		}	}		public function GetNewScore():Number{		var newscore:Number = 100 - (_moves * 10);		if (newscore < 0){			newscore = 1;		} else if (newscore == 0){			newscore = 2;		}		return newscore;	}		public function AddToMoves():void{		_moves += 1;		//if (_moves > 10){ _moves = 10}		_movesDisplay.Display(_moves);		//trace("_moves", _moves)	}		public function ChangeChallenge():void{		//_countDownTimer.StopTimer();		//removeChild(_board);		//_board = null;		this.CompleteChallenge();		//trace("changing challenge")	}			public function CompleteChallenge():void{		_levelStingSnd.play();		_countDownTimer.StopTimer();		_challengeIndex ++;		if (_challengeIndex > _challengeList.length -1){			_helpFlag = false;			//Display(daText:String,fontSize:Number, readDelay:Number, bold:Boolean, clickToKill:Boolean = false,messageID:int = 0)			_message.Display("CONGRATULATIONS! You have completed all of the levels.",16, 5, false, true, 4, 140);			//completed all the levels. tell and ask if they want to start over.			_challengeIndex = 0;		}				if (_helpFlag && _challengeIndex > 5){_helpFlag = false;}				ResetBoard(_challengeIndex);		if (_helpFlag){			//trace("disableTiles in GameScreen/CompleteChallenge()");			_board.DisableTiles();		//}else{			//_board.EnableTiles();		}		if (!_helpFlag && _challengeIndex != 0){			addChild(_interstitial);			_interstitial.playAnim();		}				SaveLevel(_challengeIndex,_helpFlag);	}		private function SaveLevel(theLevel:int,theHelpFlag:Boolean):void{		//trace("saving value...");            var so:SharedObject = SharedObject.getLocal(_ggeSoAppName);			so.data.ggeLevel = theLevel;			so.data.ggeHelpFlag = theHelpFlag;            var flushStatus:String = null;            try {                flushStatus = so.flush(10000);            } catch (error:Error) {                trace("Error...Could not write SharedObject to disk");            }            if (flushStatus != null) {                switch (flushStatus) {                    case SharedObjectFlushStatus.PENDING:                       trace("Requesting permission to save object...");                        so.addEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);                        break;                    case SharedObjectFlushStatus.FLUSHED:                        trace("Value flushed to disk.");                        break;                }            }          	}		private function onFlushStatus(event:NetStatusEvent):void {		 var so:SharedObject = SharedObject.getLocal(_ggeSoAppName);            trace("User closed permission dialog...\n");            switch (event.info.code) {                case "SharedObject.Flush.Success":                    trace("User granted permission -- value saved.\n");                    break;                case "SharedObject.Flush.Failed":                    trace("User denied permission -- value not saved.\n");                    break;            }            trace("\n");            so.removeEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);        }				public function ResetToLevelOne():void{			_challengeIndex = 0;			_moves = 0;			_movesDisplay.Display(_moves);			_helpFlag = true;			RemoveInfoModal();			_levelStingSnd.play();			ResetBoard(_challengeIndex);			SaveLevel(_challengeIndex,_helpFlag);			//_countDownTimer.ResetTimer();					}						private function onInfoButtonUp(e:Event):void{				_rollSnd.play();				this.PauseScreen();				//_infoButton.removeEventListener(MouseEvent.MOUSE_UP, onInfoButtonUp);				_infoScreen = new InfoScreen(this);				addChild(_infoScreen);				//_ScreenDaddy.NavigateScreen("InfoScreen");		}				private function onHelpButtonUp(e:Event):void{				_rollSnd.play();				this.PauseScreen();				_helpScreen = new HelpScreen(this);				addChild(_helpScreen);		}				public function RemoveInfoModal():void{			removeChild(_infoScreen);			_infoScreen = null;			//_infoButton.addEventListener(MouseEvent.MOUSE_UP, onInfoButtonUp, false, 0, true);			this.ResumeScreen();		}			public function RemoveHelpModal():void{			removeChild(_helpScreen);			_helpScreen = null;			//_infoButton.addEventListener(MouseEvent.MOUSE_UP, onInfoButtonUp, false, 0, true);			this.ResumeScreen();		}				public function PauseScreen():void{			_isScreenPaused = true;			_board.PauseScreen();			_countDownTimer.StopTimer();		}		public function ResumeScreen():void{			_isScreenPaused = false;			_board.ResumeScreen();			_countDownTimer.StartTimer();			_timesUpFlag = false;  ///kludge the messages stompoing each other			_board.EnableTiles();		}		public function Kill():void{			_board.Kill();				}		public function ShowChildren(dispObj:*):void {			for(var i:int = 0; i < dispObj.numChildren; i++) {				var obj:DisplayObject = dispObj.getChildAt(i);				if (obj is DisplayObjectContainer) {					trace(obj.name, obj);					ShowChildren(obj);				} else {					trace(obj);				}			}		}	public function CreateChallengeList():void{		/// [ [rows,columns,emptysqaure],[tile1,tile2,tile3...] ] 		//[ [rows,columns,emptysqaures,stones,holes],[tile1,tile2,tile3...],numOfRounds ]				//start test//////		///end test				//4x4		//only 2 sets of 3		_challengeList.push([ [4,4,4,0,0],[0,1,2],5 ]); //shape 1H, 4 blanks		_challengeList.push([ [4,4,4,0,0],[0,4,8],5 ]); //shape 1V, 4 blanks		//begin solutions of 4		_challengeList.push([ [4,4,3,0,0],[0,4,5,8],5 ]); //shape 6W, 3 blanks		_challengeList.push([ [4,4,3,0,0],[0,4,5,9],5 ]); //shape 3N2, 3 blanks		_challengeList.push([ [4,4,2,1,0],[0,1,2,3],5 ]); //shape 2H, 2 blanks, 1 stone		_challengeList.push([ [5,5,4,1,1],[0,1,2,6],5 ]); //shape 6S, 4 blanks, 1 stone, 1 hole		_challengeList.push([ [4,4,3,0,0],[0,4,8,9],5 ]); //shape 4E1, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [4,4,3,0,0],[0,1,2,4],5 ]); //shape 4S1, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [4,4,3,0,0],[0,1,5,6],5 ]); //shape 3W1, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [4,4,2,1,0],[0,4,8,12],5 ]); //shape 2V, 2 blanks, 1 stone, 0 hole		//starts 5x4		_challengeList.push([ [4,5,4,0,0],[0,1,5,6],5 ]); 		//shape 5, 4 blanks, 0 stone, 0 hole		_challengeList.push([ [4,5,3,0,1],[0,5,6,10],5 ]); 		//shape 6W, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [4,5,3,0,0],[0,1,2,3],5 ]); 		//shape 2H, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [4,5,3,1,0],[0,1,2,7],5 ]); 		//shape 4S2, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [4,5,3,0,0],[1,6,10,11],5 ]); 	//shape 4W2, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [4,5,3,0,0],[1,5,6,10],5 ]); 		//shape 3N1, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [4,5,2,0,1],[1,2,5,6],5 ]);  		//shape 3W2, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [4,5,3,1,0],[0,5,10,15],5 ]); 	//shape 2V, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [4,5,3,0,0],[0,1,2,5,10],5 ]); 	//shape 8E, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [4,5,3,0,0],[1,5,6,7,11],5 ]); 	//shape 12, 3 blanks, 0 stone, 0 hole		//starts 5x5  --20										//shape , 0 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,4,1,0],[0,1,2,3],5 ]); 		//shape 2H, 4 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,0,0],[0,5,10,11],5 ]); 	//shpae 4E1, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,0,0],[0,5,10,15],5 ]); 	//shape 2V, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,2,0],[0,1,6,7],5 ]); 		//shape 3W1, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,2,0,1],[0,5,6,11],5 ]); 		//shape 3N2, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,0,0],[1,5,6,7,11],5 ]); 	//shape 12, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,2,0,0],[0,1,2,3,4],5 ]); 	//shape 7H, 2 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,0,0],[0,5,10,15,20],5 ]); 	//shape 7V, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,2,0,1],[0,1,5,10],5 ]); 		//shape 4E2, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,4,0,1],[0,1,5,10,11],5 ]);	//shape 9E, 4 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,4,0,0],[0,1,2,5,10],5 ]);	//shape 8E, 4 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,1,0],[0,5,6,11,16],5 ]);	//shape 13S2, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,0,0],[1,5,6,7,10],5 ]);	//shape 16S1, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,2,0,0],[0,1,6,11,12],5 ]);	//shape 11W, 2 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,2,0],[2,5,6,7,10],5 ]); 	//shape 11N, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,3,0,0],[0,2,5,6,7],5 ]);		//shape 9N, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,0,1],[0,1,2,6,11],5 ]);	//shape 14S, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,0,0],[0,1,6,7,12],5 ]);	//shape 17S, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,0,0],[2,5,6,7,11],5 ]);	//shape 16N1, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,2,0,1],[2,7,10,11,12],5 ]);	//shape 8W, 2 blanks, 0 stone, 1 hole		//starts 4x5		_challengeList.push([ [5,4,3,0,0],[1,5,8,9,10],5 ]);  	//shape 14N, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,4,2,0,1],[0,1,2,4,6],5 ]);		//shape 9S, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,4,3,0,0],[2,4,5,6,8],5 ]);		//shape 11S, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,4,3,2,0],[0,1,2,3],5 ]);		//shape 2H, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,4,2,0,1],[0,4,8,12,16],5 ]);	//shape 7V, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,4,3,0,0],[0,1,2,3,5],5 ]);		//shape 15S1, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,4,3,0,0],[1,4,5,9,13],5 ]);	//shape 15W1, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,4,3,1,1],[0,1,2,4],5 ]);		//shape 4S1, 3 blanks, 1 stone, 1 hole		//4x4		_challengeList.push([ [4,4,2,0,1],[1,4,5,6],5 ]); 		//shape 6N, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [4,4,2,1,0],[0,4,5,9],5 ]); 		//shape 3N2, 2 blanks, 1 stone, 0 hole		//5x5 ---11		_challengeList.push([ [5,5,2,0,1],[0,1,2,3,4],5 ]); 	//shape 7H, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,0],[0,1,2,7,12],5 ]);	//shape 8S, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,0,1],[0,1,2,5,7],5 ]);		//shape 9S, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,0],[0,1,2,3,5],5 ]);		//shape 10S1, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[0,1,6,11,12],5 ]);	//shape 11W1, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,2,0,0],[1,5,6,7,11],5 ]);	//shape 12, 2 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,2,0,0],[0,1,2,7,8],5 ]);		//shape 13W1, 2 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,4,0,1],[0,1,2,6,11],5 ]);	//shape 14S, 4 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,0,1],[0,1,2,3,6],5 ]);		//shape 15S, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[2,5,6,7,11],5 ]);	//shape 16N1, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,0,0],[0,5,6,11,12],5 ]);	//shape 17N, 3 blanks, 0 stone, 0 hole				_challengeList.push([ [5,5,2,1,1],[1,5,6,7,11],5 ]);	//shape 12, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[2,5,6,7,10],5 ]);	//shape 11N1, 3 blanks, 1 stone, 1 hole				//4x5		_challengeList.push([ [5,4,3,0,1],[1,2,4,5],5 ]);		//shape 3W2, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,4,3,0,1],[0,4,5,8],5 ]);		//shape 6E, 3 blanks, 0 stone, 1 hole				//5x5 ---11		_challengeList.push([ [5,5,3,0,1],[0,5,10,15,20],5 ]); 	//shape 7V, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,2,0,1],[0,5,10,11,12],5 ]);	//shape 8N, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,4,0,0],[0,2,5,6,7],5 ]);		//shape 9N, 4 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,4,0,0],[3,5,6,7,8],5 ]);		//shape 10N1, 4 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,4,0,1],[2,5,6,7,10],5 ]);	//shape 11N1, 4 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,0,0],[1,5,6,7,11],5 ]);	//shape 12, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,2,1],[1,6,10,11,15],5 ]);	//shape 13N1, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[0,5,6,7,10],5 ]);	//shape 14E, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,0],[2,5,6,7,8],5 ]);		//shape 15N1, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[1,5,6,7,10],5 ]);	//shape 16S1, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,0,0],[2,6,7,10,11],5 ]);	//shape 17W, 3 blanks, 0 stone, 0 hole				_challengeList.push([ [5,5,3,2,0],[1,2,5,6,10],5 ]);	//shape 17E, 3 blanks, 2 stones, 0 hole		_challengeList.push([ [5,5,1,0,1],[0,1,2,3],5 ]);		//shape 2H, 1 blanks, 0 stones, 1 hole		//4x4		_challengeList.push([ [4,4,1,1,1],[0,1,2,5],5 ]);		//shape 6S, 1 blanks, 1 stones, 1 hole		_challengeList.push([ [4,4,1,1,1],[1,2,4,5],5 ]);		//shape 3W2, 1 blanks, 1 stones, 1 hole				//5x5 ---11		_challengeList.push([ [5,5,3,0,1],[0,1,2,3,4],5 ]); 	//shape 7H, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,0,0],[2,7,10,11,12],5 ]);	//shape 8W, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,0,0],[0,1,5,10,11],5 ]);	//shape 9E, 3 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,4,0,0],[0,1,5,10,15],5 ]);	//shape 10E1, 4 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,4,0,1],[1,2,6,10,11],5 ]);	//shape 11W2, 4 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[1,5,6,7,11],5 ]);	//shape 12,   3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[0,1,6,7,8],5 ]);		//shape 13E1, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[2,5,6,7,12],5 ]);	//shape 14W, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,0],[0,5,10,11,15],5 ]);	//shape 15E1, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,3,0,1],[1,2,5,6,11],5 ]);	//shape 16E2, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,0,0],[0,1,6,7,12],5 ]);	//shape 17S, 3 blanks, 0 stone, 0 hole		//4x4// 		_challengeList.push([ [4,4,1,1,1],[0,1,4,5],5 ]);		//shape 5, 1 blanks, 1 stones, 1 hole		_challengeList.push([ [4,4,1,1,1],[0,1,2,3],5 ]);		//shape 2H, 1 blanks, 1 stones, 1 hole		//4x5// 		_challengeList.push([ [4,5,2,0,1],[0,1,2,3,4],5 ]);		//shape 7H, 2 blanks, 0 stones, 1 hole		_challengeList.push([ [4,5,2,1,1],[0,1,5,6],5 ]);		//shape 5, 2 blanks, 1 stones, 1 hole				//5x5 ---11		_challengeList.push([ [5,5,3,0,1],[0,5,10,15,20],5 ]); 	//shape 7V, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[0,1,2,5,10],5 ]);	//shape 8E, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,0,1],[0,1,6,10,11],5 ]);	//shape 9W, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,0,1],[0,1,6,11,16],5 ]);	//shape 10W1, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,0,1],[0,5,6,7,12],5 ]);	//shape 11N2, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,2,0,1],[1,5,6,7,11],5 ]);	//shape 12,   2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,0,1],[1,5,6,10,15],5 ]);	//shape 13S1, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[1,6,10,11,12],5 ]);	//shape 14N, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[1,5,6,11,16],5 ]);	//shape 15W1, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[0,1,6,7,11],5 ]);	//shape 16W2, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[1,2,5,6,10],5 ]);	//shape 17E, 3 blanks, 1 stone, 1 hole				//5x4// 		_challengeList.push([ [5,4,2,0,0],[0,4,5,6,10],5 ]);	//shape 11N2, 2 blanks, 0 stones, 0 hole		_challengeList.push([ [5,4,3,1,0],[1,2,4,5],5 ]);		//shape 4W2, 2 blanks, 1 stones, 1 hole		//4x4// 		_challengeList.push([ [4,4,2,0,1],[0,4,5,9],5 ]);		//shape 4N2, 2 blanks, 0 stones, 1 hole		_challengeList.push([ [4,4,2,0,1],[0,1,4,5],5 ]);		//shape 5, 2 blanks, 0 stones, 1 hole				///start duplicating last 60		//5x5 ---11		_challengeList.push([ [5,5,3,0,1],[0,1,2,3,4],6 ]); 	//shape 7H, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,0],[0,1,2,7,12],6 ]);	//shape 8S, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,0,1],[0,1,2,5,7],6 ]);		//shape 9S, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,0],[0,1,2,3,5],6 ]);		//shape 10S1, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[0,1,6,11,12],6 ]);	//shape 11W1, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,1,0],[1,5,6,7,11],6 ]);	//shape 12, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,2,0,1],[0,1,2,7,8],6 ]);		//shape 13W1, 2 blanks, 0 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[0,1,2,6,11],6 ]);	//shape 14S, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,0,1],[0,1,2,3,6],6 ]);		//shape 15S, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[2,5,6,7,11],6 ]);	//shape 16N1, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,0,0],[0,5,6,11,12],6 ]);	//shape 17N, 3 blanks, 0 stone, 0 hole				_challengeList.push([ [5,5,2,1,1],[1,5,6,7,11],6 ]);	//shape 12, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[2,5,6,7,10],6 ]);	//shape 11N1, 3 blanks, 1 stone, 1 hole				//4x5		_challengeList.push([ [5,4,3,0,1],[1,2,4,5],6 ]);		//shape 3W2, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,4,3,0,1],[0,4,5,8],6 ]);		//shape 6E, 3 blanks, 0 stone, 1 hole				//5x5 ---11		_challengeList.push([ [5,5,2,0,1],[0,5,10,15,20],6 ]); 	//shape 7V, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,2,1,1],[0,5,10,11,12],6 ]);	//shape 8N, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,0,1],[0,2,5,6,7],6 ]);		//shape 9N, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[3,5,6,7,8],6 ]);		//shape 10N1, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,0,1],[2,5,6,7,10],6 ]);	//shape 11N1, 3 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,2,0,1],[1,5,6,7,11],6 ]);	//shape 12, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[1,6,10,11,15],6 ]);	//shape 13N1, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[0,5,6,7,10],6 ]);	//shape 14E, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,0],[2,5,6,7,8],6 ]);		//shape 15N1, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,2,1,1],[1,5,6,7,10],6 ]);	//shape 16S1, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,0,1],[2,6,7,10,11],6 ]);	//shape 17W, 3 blanks, 0 stone, 1 hole				_challengeList.push([ [5,5,3,2,0],[1,2,5,6,10],6 ]);	//shape 17E, 3 blanks, 2 stones, 0 hole		_challengeList.push([ [5,5,1,0,1],[0,1,2,3],6 ]);		//shape 2H, 1 blanks, 0 stones, 1 hole		//4x4		_challengeList.push([ [4,4,1,1,1],[0,1,2,5],6 ]);		//shape 6S, 1 blanks, 1 stones, 1 hole		_challengeList.push([ [4,4,1,1,1],[1,2,4,5],6 ]);		//shape 3W2, 1 blanks, 1 stones, 1 hole				//5x5 ---11		_challengeList.push([ [5,5,2,1,1],[0,1,2,3,4],6 ]); 	//shape 7H, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,0],[2,7,10,11,12],6 ]);	//shape 8W, 3 blanks, 1 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[0,1,5,10,11],6 ]);	//shape 9E, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,0,1],[0,1,5,10,15],6 ]);	//shape 10E1, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[1,2,6,10,11],6 ]);	//shape 11W2, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[1,5,6,7,11],6 ]);	//shape 12,   3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[0,1,6,7,8],6 ]);		//shape 13E1, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[2,5,6,7,12],6 ]);	//shape 14W, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,0],[0,5,10,11,15],6 ]);	//shape 15E1, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,2,0,1],[1,2,5,6,11],6 ]);	//shape 16E2, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[0,1,6,7,12],6 ]);	//shape 17S, 3 blanks, 1 stone, 1 hole		//4x4// 		_challengeList.push([ [4,4,1,1,1],[0,1,4,5],6 ]);		//shape 5, 1 blanks, 1 stones, 1 hole		_challengeList.push([ [4,4,1,1,1],[0,1,2,3],6 ]);		//shape 2H, 1 blanks, 1 stones, 1 hole		//4x5// 		_challengeList.push([ [4,5,2,0,1],[0,1,2,3,4],6 ]);		//shape 7H, 2 blanks, 0 stones, 1 hole		_challengeList.push([ [4,5,2,1,1],[0,1,5,6],6 ]);		//shape 5, 2 blanks, 1 stones, 1 hole				//5x5 ---11		_challengeList.push([ [5,5,2,0,1],[0,5,10,15,20],6 ]); 	//shape 7V, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[0,1,2,5,10],6 ]);	//shape 8E, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[0,1,6,10,11],6 ]);	//shape 9W, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,2,1,1],[0,1,6,11,16],6 ]);	//shape 10W1, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[0,5,6,7,12],6 ]);	//shape 11N2, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[1,5,6,7,11],6 ]);	//shape 12,   3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,0,1],[1,5,6,10,15],6 ]);	//shape 13S1, 2 blanks, 0 stone, 1 hole		_challengeList.push([ [5,5,3,2,1],[1,6,10,11,12],6 ]);	//shape 14N, 3 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[1,5,6,11,16],6 ]);	//shape 15W1, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,1,1],[0,1,6,7,11],6 ]);	//shape 16W2, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,1,1],[1,2,5,6,10],6 ]);	//shape 17E, 2 blanks, 1 stone, 1 hole				//5x5// 		_challengeList.push([ [5,5,2,2,1],[1,5,6,7,11],6 ]);	//shape 12, 1 blanks, 3 stones, 1 hole		_challengeList.push([ [5,5,2,2,1],[2,5,6,7,10],6 ]);	//shape 11N1, 2 blanks, 2 stones, 1 hole 		_challengeList.push([ [5,5,1,3,1],[0,1,2,3,4],6 ]);		//shape 7H, 1 blanks, 2 stones, 1 hole		_challengeList.push([ [5,5,2,3,1],[0,5,10,15,20],6 ]);	//shape 7V, 2 blanks, 2 stones, 1 hole		//170 done//		//30 more//		//4x4// 		_challengeList.push([ [4,4,1,1,1],[0,4,5,9],6 ]);		//shape 3N2, 1 blanks, 1 stones, 1 hole		_challengeList.push([ [4,4,1,1,1],[1,4,5,6],6 ]);		//shape 6N, 1 blanks, 1 stones, 1 hole		//4x5// 		_challengeList.push([ [5,4,2,0,1],[0,4,8,12,16],6 ]);	//shape 7V, 2 blanks, 0 stones, 1 hole		_challengeList.push([ [5,4,1,2,1],[0,1,2,3],6 ]);		//shape 2H, 1 blanks, 2 stones, 1 hole		//5x5 ---11		_challengeList.push([ [5,5,2,1,1],[0,1,2,3,4],6 ]); 	//shape 7H, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,1,1],[0,1,2,7,12],6 ]);	//shape 8S, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[0,1,2,5,7],6 ]);		//shape 9S, 2 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,2,0],[0,1,2,3,8],6 ]);		//shape 10S2, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[1,2,6,10,11],6 ]);	//shape 11W2, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,1,1],[1,5,6,7,11],6 ]);	//shape 12, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[2,3,5,6,7],6 ]);		//shape 13W2, 2 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,3,1,1],[0,1,2,6,11],6 ]);	//shape 14S, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,3,2,0],[0,1,2,3,7],6 ]);		//shape 15S2, 3 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,3,1,1],[0,5,6,7,11],6 ]);	//shape 16N2, 3 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[0,5,6,11,12],6 ]);	//shape 17N, 2 blanks, 2 stone, 1 hole				//4x4// 		_challengeList.push([ [4,4,1,1,1],[1,5,8,9],6 ]);		//shape 4W2, 1 blanks, 1 stones, 1 hole		_challengeList.push([ [4,4,1,1,1],[0,4,8,12],6 ]);		//shape 2V, 1 blanks, 1 stones, 1 hole		//4x5// 		_challengeList.push([ [5,4,1,1,1],[2,4,5,6,8],6 ]);		//shape 11N1, 1 blanks, 1 stones, 1 hole		_challengeList.push([ [5,4,1,2,1],[0,1,4,5],6 ]);		//shape 5, 1 blanks, 2 stones, 1 hole				//5x5 ---11		_challengeList.push([ [5,5,2,1,1],[0,5,10,15,20],6 ]); 	//shape 7V, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,1,1],[0,5,10,11,12],6 ]);	//shape 8N, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,1,1],[0,2,5,6,7],6 ]);		//shape 9N, 2 blanks, 1 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[0,5,6,7,8],6 ]);		//shape 10N2, 2 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[0,5,6,7,12],6 ]);	//shape 11N2, 2 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[1,5,6,7,11],6 ]);	//shape 12, 2 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[0,5,10,11,16],6 ]);	//shape 13N2, 2 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[0,5,6,7,10],6 ]);	//shape 14E, 2 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,2,2,0],[1,5,6,7,8],6 ]);		//shape 15N2, 2 blanks, 2 stone, 0 hole		_challengeList.push([ [5,5,2,2,1],[1,5,6,7,12],6 ]);	//shape 16S2, 2 blanks, 2 stone, 1 hole		_challengeList.push([ [5,5,2,2,1],[2,6,7,10,11],6 ]);	//shape 17W, 2 blanks, 2 stone, 1 hole			}	}						}