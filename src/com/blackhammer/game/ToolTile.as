package com.blackhammer.game{		import com.blackhammer.util.*	import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.text.*;	import flash.media.*;	import flash.utils.Timer;    import flash.events.TimerEvent;	//import flash.display.DisplayObject.blendMode		public class ToolTile extends Sprite{		private var _tileW:int;	private var _tileH:int;	private var _myDaddy:Object;	private var _myIndex:Number;	private var _iDField:TextField  = new TextField();	private var _format:TextFormat = new TextFormat();	private var _fontSize:Number = 24;	private var _holdX:Number;	private var _holdY:Number;	private var _holdMouseDnX:Number;	private var _holdMouseDnY:Number;	private var _holdStartX:Number;	private var _holdStartY:Number;	private var _holdDepth:Number;	private var _tileState:Number;	private var _selected:Boolean;	private var _enabled:Boolean;		///----sounds----////	private var _mouseDownSnd:Sound= new mouseRoll_snd(); //mouseDown_snd();	//private var _mouseUpSnd:Sound= new placeObject_snd();	//private var _rollSnd:Sound= new mouseRoll_snd();	private var _matchMadeSnd:Sound = new matchMade_snd();			public function ToolTile(myDaddy:Object,daNum:Number,tileW:Number,tileH:Number,daX:Number,daY:Number):void{	_myDaddy = myDaddy;	_myIndex = daNum;	_tileW = tileW;	_tileH = tileH;	_holdX = daX;	_holdY = daY;	var rect:Shape = new Shape();	rect.graphics.lineStyle(1);	rect.graphics.beginFill(0xFF0000,1);	rect.graphics.drawRect(0,0,tileW,tileH);		_iDField.width = 50;	_iDField.x = rect.x; 	_iDField.y = rect.y + 9;	_iDField.multiline = _iDField.wordWrap = false;	_iDField.autoSize = TextFieldAutoSize.CENTER;	_iDField.type = TextFieldType.DYNAMIC;	_iDField.alpha = 1.0;	_iDField.selectable = false;    _format.font = "Verdana";	_format.bold = true;    _format.color = 0x00FF00;    _format.size = _fontSize;    _format.underline = false;    _iDField.defaultTextFormat = _format;		_iDField.text = String(daNum)	//_iDField.setTextFormat(_format);	 	this.addChild(rect);	this.addChild(_iDField);		this.addEventListener(Event.ADDED_TO_STAGE, OnTheStage, false, 0, true);	//trace("rect parent is:", rect.parent);	//trace("rect root is:", rect.root);	}			private function OnTheStage(e:Event):void{		this.removeEventListener(Event.ADDED_TO_STAGE, OnTheStage);		_enabled = false		_selected = false		Enable();			}			private function MouseOverTile(e:Event):void{		//though tracing this.parent and _myDaddy gives the same object, can't get public property thorugh this.parent		//var topTile:Number = this.parent._numOfRows * this.parent._numOfColumns		//trace(this.parent.numChildren)		//var topTile:Number = (_myDaddy._numOfRows * _myDaddy._numOfColumns) -1				//_rollSnd.play();		_holdDepth = this.parent.getChildIndex(this);		var topTile:Number = this.parent.numChildren -1;		this.parent.setChildIndex(this,topTile);		var scaleConstant:Number = 1.1;		this.scaleX = this.scaleY = scaleConstant;		//_holdX = this.x;		//_holdY = this.y;		this.x = this.x - Math.floor(((_tileW * scaleConstant) - _tileW)/2.0);		this.y = this.y - Math.floor(((_tileH * scaleConstant) - _tileH)/2.0);	}		private function MouseOutTile (e:Event):void{		this.parent.setChildIndex(this,_holdDepth);		this.x = _holdX;		this.y = _holdY;		this.scaleX = 1.0;		this.scaleY = 1.0;	}		private function MouseDownTile (e:Event):void{		_mouseDownSnd.play();		_selected = !_selected;		if (_selected) {			//this.blendMode = "lighten"			this.alpha = .6;			_tileState = 2;		}else{			//this.blendMode = "normal"			this.alpha = 1.0;			_tileState = 1;		}	}				public function SetNum(daNum:Number):void {			_iDField.text = String(daNum);		}			public function Enable():void{		if (_enabled == false){			_enabled = true;			this.addEventListener(MouseEvent.MOUSE_DOWN, MouseDownTile, false, 0, true);		}	}		public function Disable():void{		if (_enabled == true){			_enabled = false;			this.removeEventListener(MouseEvent.MOUSE_DOWN, MouseDownTile);		}	}				public function set tileState(tileState):void {			_tileState = tileState;			//return _tileSkinArray.indexOf(_tileSkin);		}				public function get tileState():Number {			return _tileState;			//return _tileSkinArray.indexOf(_tileSkin);		}				public function get ID():Number {			return _myIndex;			//return _tileSkinArray.indexOf(_tileSkin);		}			public function get tileW():Number {			return _tileW;		}	public function get tileH():Number {			return _tileH;		}		}}