package  com.blackhammer.game{		import com.blackhammer.game.*	import com.blackhammer.util.*	import flash.display.*;	import flash.geom.*;	import flash.text.*;	import flash.events.TimerEvent;    import flash.events.Event;	import flash.events.MouseEvent;	import flash.media.*;	import flash.utils.*;	import fl.controls.Button;		public class ToolScreen extends Sprite{			private var _startX:Number;		private var _startY:Number;		public var _numOfRows:Number;		public var _numOfColumns:Number;				private var _tileW:int = 50;		private var _tileH:int = 50;		private var _daSpace:Number = 0; //extra space between tiles		private var _tileArray:Array = [];		private var _tileLocArray:Vector.<Point> = new Vector.<Point>(); //parallel array for location points		private var _tileMapArray:Vector.<Number> = new Vector.<Number>(); //parallel array for mapping tile states		private var _myDaddy:Object;				private var _g:Graphics;		private var _gSprite:Sprite = new Sprite();		private var _b:Graphics;		private var _bSprite:Sprite = new Sprite();		private var _board:Sprite = new Sprite();		private var _gridBackColor:uint = 0x000000;				private var _rowsField:TextField  = new TextField();		private var _rowsEnterField:TextField  = new TextField();		private var _columnsField:TextField  = new TextField();		private var _columnsEnterField:TextField  = new TextField();		private var _stonesField:TextField = new TextField();		private var _stonesEnterField:TextField = new TextField();		private var _holesField:TextField = new TextField();		private var _holesEnterField:TextField = new TextField();		private var _blanksField:TextField = new TextField();		private var _blanksEnterField:TextField = new TextField();				private var _dataField:TextField = new TextField();		private var _format:TextFormat = new TextFormat();				private var _buildGridButton:Button = new Button();		private var _buildDataButton:Button = new Button();				public function ToolScreen(myDaddy:Object) {			_myDaddy = myDaddy;						_g = _gSprite.graphics;			_b = _bSprite.graphics;			this.addChild(_bSprite);			this.addChild(_board);			CreateFields();			BuildButtons();			this.addEventListener(Event.ADDED_TO_STAGE, OnTheStage, false, 0, true);		}				private function OnTheStage(e:Event):void{			this.removeEventListener(Event.ADDED_TO_STAGE, OnTheStage);		}				public function BuildBoard(e:Event) {			removeChild(_bSprite);			removeChild(_board);			_board = null;			_board = new Sprite();			_gSprite = null;			_gSprite = new Sprite();			_bSprite = null;			_bSprite = new Sprite();						_numOfRows = Number(_rowsEnterField.text);			_numOfColumns = Number(_columnsEnterField.text);			//trace ("_tileArray", _tileArray);						_startX	= (320 - (_numOfColumns*_tileW))/2; //40			_startY = 120 + (5 - _numOfRows)* _tileH/2;			BuildGridBack(_startX,_startY);			addChild(_bSprite);			this.ResetTiles();			addChild(_board);		}				public function ResetTiles():void {			_tileArray = []; //just incase			var counter:int = 0;			var daState:Number;			var holes:Number;			for (var ii:int = 0; ii < _numOfRows; ii++){				for (var i:int = 0; i < _numOfColumns; i++){					var daX:Number = _startX + (i * _tileW) + _daSpace * i;					var daY:Number = _startY + (ii * _tileH) + _daSpace * ii;					_tileLocArray.push(new Point(daX, daY));					_tileArray.push(new ToolTile(this,counter,_tileW,_tileH,daX,daY));					_tileArray[counter].x = daX;					_tileArray[counter].y = daY;					_board.addChild(_tileArray[counter]);										daState = 1;					_tileMapArray.push(daState);					_tileArray[counter].tileState = daState;										counter++;				}			}						BuildGrid(_startX,_startY);			if (_board.contains(_gSprite)){_board.removeChild(_gSprite);}			_board.addChild(_gSprite);		}								private function BuildGridBack(startX,startY):void{			_b.beginFill(_gridBackColor,1);			_b.drawRect(startX,startY,_numOfColumns * _tileW,_numOfRows * _tileH);			//_b.endFill();		}						/////----build grid with graphics for now---////		private function BuildGrid(startX,startY):void{			_g.lineStyle(1, 0xFFFFFF);			_g.moveTo(startX,startY);			_g.lineTo(startX ,startY + (_numOfRows * _tileH));			_g.lineTo(startX + (_numOfColumns * _tileW), startY + (_numOfRows * _tileH));			_g.lineTo(startX + (_numOfColumns * _tileW), startY);			_g.lineTo(startX ,startY);						for(var i:int = 1; i < _numOfRows; i++){				_g.moveTo(startX,startY + (i * _tileH));				_g.lineTo(startX + (_numOfColumns * _tileW),startY + (i * _tileH));			}			for( i = 1; i < _numOfColumns; i++){				_g.moveTo(startX + (i * _tileW), startY );				_g.lineTo(startX + (i * _tileW),startY + (_numOfRows * _tileH));			}					}				private function MakeData(e:Event):void{			//get tiles down			var holder:Array = new Array();			for (var i:int = 0; i < _tileArray.length; i++){				if (_tileArray[i].tileState == 2){					holder.push(_tileArray[i].ID);				}							}			//put array into data field			//_challengeList.push([ [rows,columns,emptysqaures,stones,holes],[tile1,tile2,tile3...] ]);			_dataField.text = "_challengeList.push([ [" + 			String(_rowsEnterField.text) + "," +			String(_columnsEnterField.text) + "," +			String(_blanksEnterField.text) + "," +			String(_stonesEnterField.text) + "," +			String(_holesEnterField.text) + "],[" +			String(holder) + "],5 ]);" ;				}				private function GetEndOfRow(myIndex:Number):Number{			return Math.floor((myIndex + _numOfColumns)/_numOfColumns) * _numOfColumns - 1;		}				private function GetBeginOfRow(myIndex:Number):Number{			return Math.floor(myIndex/_numOfColumns) * _numOfColumns;		}				private function GetEndOfColumn(myIndex:Number):Number{			var myRow:int = Math.ceil((myIndex+ 1)/_numOfColumns);			return myIndex + ((_numOfRows - myRow) * _numOfColumns);		}					private function GetBeginOfColumn(myIndex:Number):Number{			var myRow:int = Math.ceil((myIndex+ 1)/_numOfColumns);			return myIndex - ((myRow - 1) * _numOfColumns);		}								public function EnableTiles():void{			for each (var tile in _tileArray){				tile.Enable();			}		}				public function DisableTiles():void{			for each (var tile in _tileArray){				tile.Disable();			}		}						public function ClearBoard():void{			var arraysize:Number = _tileArray.length;			for (var i:int = 0; i < arraysize; i++){				removeChild(_tileArray[i]);				_tileArray[i] = null;			}					}								private function BuildButtons():void{	 		_buildGridButton.move(30,75);            _buildGridButton.label = "Build Grid";			//_buildGridButton.setStyle("textFormat", new TextFormat("Georgia"));			_buildGridButton.width = 120;			_buildGridButton.toggle = false;			_buildGridButton.emphasized = true;						_buildDataButton.move(170,75);            _buildDataButton.label = "Make Data";            //_buildDataButton.setStyle("textFormat", new TextFormat("Georgia"));            _buildDataButton.width = 120;            _buildDataButton.toggle = false;            _buildDataButton.emphasized = true;			            _buildGridButton.addEventListener(MouseEvent.CLICK,BuildBoard);            _buildDataButton.addEventListener(MouseEvent.CLICK,MakeData);            addChild(_buildGridButton);            addChild(_buildDataButton);		}			private function CreateFields():void{		//_scoreField:TextField  = new TextField();		//_movesField:TextField  = new TextField();		//_format:TextFormat = new TextFormat();				var backgroundcolor = 0xBB9999;				_format.font = "Verdana";		_format.bold = false;        _format.color = 0x000000;        _format.size = 14;        _format.underline = false;				_rowsField.width = 25;		_rowsField.x = 30; 		_rowsField.y = 50;		_rowsField.multiline = _rowsField.wordWrap = false;		_rowsField.autoSize = TextFieldAutoSize.CENTER;		_rowsField.type = TextFieldType.DYNAMIC;		_rowsField.defaultTextFormat = _format;		_rowsField.text = "rows"		addChild(_rowsField);				_rowsEnterField.width = 25;		_rowsEnterField.x = 30; 		_rowsEnterField.y = 25;		_rowsEnterField.multiline = _rowsEnterField.wordWrap = false;		_rowsEnterField.autoSize = TextFieldAutoSize.CENTER;		_rowsEnterField.type = TextFieldType.INPUT;		_rowsEnterField.defaultTextFormat = _format;		_rowsEnterField.border = true;		_rowsEnterField.borderColor = 0x000000;		_rowsEnterField.background = true;		_rowsEnterField.backgroundColor = backgroundcolor;		_rowsEnterField.text = "4"		addChild(_rowsEnterField);				_columnsField.width = 25;		_columnsField.x = 90; 		_columnsField.y = 50;		_columnsField.multiline = _columnsField.wordWrap = false;		_columnsField.autoSize = TextFieldAutoSize.CENTER;		_columnsField.type = TextFieldType.DYNAMIC;		_columnsField.defaultTextFormat = _format;		_columnsField.text = "columns"		addChild(_columnsField);				_columnsEnterField.width = 25;		_columnsEnterField.x = 90; 		_columnsEnterField.y = 25;		_columnsEnterField.multiline = _columnsEnterField.wordWrap = false;		_columnsEnterField.autoSize = TextFieldAutoSize.CENTER;		_columnsEnterField.type = TextFieldType.INPUT;		_columnsEnterField.defaultTextFormat = _format;		_columnsEnterField.border = true;		_columnsEnterField.borderColor = 0x000000;		_columnsEnterField.background = true;		_columnsEnterField.backgroundColor = backgroundcolor;		_columnsEnterField.text = "4"		addChild(_columnsEnterField);				_blanksField.width = 25;		_blanksField.x = 150; 		_blanksField.y = 50;		_blanksField.multiline = _blanksField.wordWrap = false;		_blanksField.autoSize = TextFieldAutoSize.CENTER;		_blanksField.type = TextFieldType.DYNAMIC;		_blanksField.defaultTextFormat = _format;		_blanksField.text = "blanks"		addChild(_blanksField);				_blanksEnterField.width = 25;		_blanksEnterField.x = 150; 		_blanksEnterField.y = 25;		_blanksEnterField.multiline = _blanksEnterField.wordWrap = false;		_blanksEnterField.autoSize = TextFieldAutoSize.CENTER;		_blanksEnterField.type = TextFieldType.INPUT;		_blanksEnterField.defaultTextFormat = _format;		_blanksEnterField.border = true;		_blanksEnterField.borderColor = 0x000000;		_blanksEnterField.background = true;		_blanksEnterField.backgroundColor = backgroundcolor;		_blanksEnterField.text = "0"		addChild(_blanksEnterField);				_stonesField.width = 25;		_stonesField.x = 210; 		_stonesField.y = 50;		_stonesField.multiline = _stonesField.wordWrap = false;		_stonesField.autoSize = TextFieldAutoSize.CENTER;		_stonesField.type = TextFieldType.DYNAMIC;		_stonesField.defaultTextFormat = _format;		_stonesField.text = "stones"		addChild(_stonesField);				_stonesEnterField.width = 25;		_stonesEnterField.x = 210; 		_stonesEnterField.y = 25;		_stonesEnterField.multiline = _stonesEnterField.wordWrap = false;		_stonesEnterField.autoSize = TextFieldAutoSize.CENTER;		_stonesEnterField.type = TextFieldType.INPUT;		_stonesEnterField.defaultTextFormat = _format;		_stonesEnterField.border = true;		_stonesEnterField.borderColor = 0x000000;		_stonesEnterField.background = true;		_stonesEnterField.backgroundColor = backgroundcolor;		_stonesEnterField.text = "0"		addChild(_stonesEnterField);				_holesField.width = 25;		_holesField.x = 270; 		_holesField.y = 50;		_holesField.multiline = _holesField.wordWrap = false;		_holesField.autoSize = TextFieldAutoSize.CENTER;		_holesField.type = TextFieldType.DYNAMIC;		_holesField.defaultTextFormat = _format;		_holesField.text = "holes"		addChild(_holesField);				_holesEnterField.width = 25;		_holesEnterField.x = 270; 		_holesEnterField.y = 25;		_holesEnterField.multiline = _holesEnterField.wordWrap = false;		_holesEnterField.autoSize = TextFieldAutoSize.CENTER;		_holesEnterField.type = TextFieldType.INPUT;		_holesEnterField.defaultTextFormat = _format;		_holesEnterField.border = true;		_holesEnterField.borderColor = 0x000000;		_holesEnterField.background = true;		_holesEnterField.backgroundColor = backgroundcolor;		_holesEnterField.text = "0"		addChild(_holesEnterField);		        _format.size = 11;				_dataField.width = 275;		_dataField.x = 25; 		_dataField.y = 420;		_dataField.multiline = _dataField.wordWrap = false;		_dataField.autoSize = TextFieldAutoSize.CENTER;		_dataField.type = TextFieldType.DYNAMIC;		_dataField.defaultTextFormat = _format;		_dataField.text = ""		_dataField.border = true;		_dataField.borderColor = 0x000000;		addChild(_dataField);	}			public function Kill():void{			var arraysize:Number = _tileArray.length;			for (var i:int = 0; i < arraysize; i++){				removeChild(_tileArray[i]);				_tileArray[i] = null;			}		}		}}